17. Letter Combinations of a Phone Number (DFS + backtracking + must use StringBuilder since DFS construct String require mutable object)
22. Generate Parentheses (DFS + open / close brace condition)
37. Sudoku Solver (DFS + backtracking if not suitable to put char in + board[3 * (row / 3) + i / 3][3 * (col / 3) + i % 3] == c)
39. Combination Sum (DFS + backtracking and to handle duplicate require add start index to tracking but no need to +1 in recursive since it allows repeat using same element)
40. Combination Sum II (DFS + backtracking and sort with addtional condition to skip duplicated combinations required)
46. Permutations (DFS + backtracking checking already existing value and always start from index = 0 to build)
47. Permutations II (DFS + backtracking with boolean array to assure same value after permutation keep the same order, do not confuse with 40. Combination Sum II, the problem of computing permutation is calculating all possibilities with introducing boolean visited, computing combination will only keep the single case and it need Arrays.sort() first)
51. N-Queens (DFS + backtracking)
52. N-Queens II (DFS + backtracking + just use boolean for cols / diagonal / paradiagonal)
77. Combinations (DFS + backtracking)
78. Subsets (backtrack
            // base condition
            if(index >= nums.length) {
                return;
            }
            // Logic branch-1: Not add nums[index] into current subset and its inheritance chain sets
            helper(result, tmp, nums, index + 1);)
            // Create one subset contain nums[index]
            List<Integer> oneSubset = new ArrayList<Integer>(tmp);
            oneSubset.add(nums[index]);
            result.add(oneSubset);
            // Logic branch-2: Add nums[index] into current subset and its inheritance chain sets
            helper(result, oneSubset, nums, index + 1);)
79. Word Search (
public boolean dfs(char[][] board, String word, int index, int rowIndex, int columnIndex, boolean[][] visited) {
        // Base case, when index reach the end, and not return as false means we found the word in board
        if(index == word.length()) {
            return true;
        } 
        
        // Boundary check must before conditional check, otherwise will throw out ArrayOutOfBound exception
        if(rowIndex < 0 || rowIndex > board.length - 1 || columnIndex < 0 || columnIndex > board[0].length - 1) {
            return false;
        }
        
        // Condition to break out current level loop as this item on board is already visited
        if(visited[rowIndex][columnIndex]) {
            return false;
        }
        
        // Condition to break out current level loop as this item on board not match the required character
        if(board[rowIndex][columnIndex] != word.charAt(index)) {
            return false;
        }
        
        // Record current item in board has been visited before looply detect next character
        // in potential item
        visited[rowIndex][columnIndex] = true;
        
        // Detect potential item for next character(index + 1) on right/left/up/down four directions 
        boolean result = dfs(board, word, index + 1, rowIndex + 1, columnIndex, visited) ||
                         dfs(board, word, index + 1, rowIndex - 1, columnIndex, visited) ||
                         dfs(board, word, index + 1, rowIndex, columnIndex + 1, visited) ||
                         dfs(board, word, index + 1, rowIndex, columnIndex - 1, visited);
        
        // Restore the boolean tag for current item for next round detect
        visited[rowIndex][columnIndex] = false;
        
        return result;
    })
90. Subsets II (backtrack but sort first + skip duplicate numbers)
93. Restore IP Address (2 ways of tricky DFS + backtracking, append 1 char or dot each time vs. build 1 token each time)
95. Unique Binary Search Trees II (2 DFS style of build all combinations of BFS)
216. Combination Sum III (DFS + backtracking and manually create the combination set)
241. Different Ways to Add Parentheses (The problem is very similar to 95. Unique Binary Search Trees II)
247. Strobogrammatic Number II (Special DFS with construct the number with two digits each time)
267. Palindrome Permutation II (Same as Permutations II, but calculating middle section by odd count character first)
282. Expression Add Operators (Similar as 93. Restore IP Address, special on handle leading zero and multiple case)
291. Word Pattern II (Similar as 93. Restore IP Address, same way to construct the substring)
293. Filp Game (Straightforward backtracking)
301. Remove Invalid Parentheses (DFS + backtracking + calculating rmL, rmR first, when encounter ( or ) just use or remove it)
320. Generalized Abbreviation (Tricky DFS + backtracking as different style for normal backtracking, divide and conquer into two situations, one is append only number count, another is append char + number count, similar to 301.Remove Invalid Parentheses)
329. Longest Increasing Path in a Matrix (DFS + Memoization + to handle initial position set 'prev' as Integer.MIN_VALUE)
351. Android Unlock Patterns (DFS + backtracking + Special handle skip issue by initial 2D array to store middle value on path)
377.Combination Sum IV (DFS with memoization + Follow up with negative number handle)
401. Binary Watch (DFS + backtracking + careful about hour < 12 and minute < 60 condition)
64.Minimum Path Sum (DP(backtracking) with memoization)
638.Shopping Offers (DFS with memoization)
935.Knight Dialer (DFS with memoization)
139.Word Break (DFS with memoization)
131. Palindrome Partitioning (DFS + backtracking)
212. Word Search II (Trie + DFS + backtracking)
648. Replace Words (Trie)
979. Distribute Coins in Binary Tree (we have an excess of node.val + dfs(node.left) + dfs(node.right) - 1 coins at this node)
841. Keys and Rooms (When we enter a room, mark it as visited)
1026. Maximum Difference Between Node and Ancestor (Maintain min and max value at one time)
1020. Number of Enclaves (We flood-fill the land (change 1 to 0) from the boundary of the grid. Then, we count the remaining land.)
947. Most Stones Removed with Same Row or Column (Same style as 841, change based on Number of Islands, dfs + unionfind)
200. Number Of Islands (Similar to 1020, 947, DFS + Unionfind)
547. Friend Circles (Same as Number of Connected Components in an Undirected Graph, style like 841)
323. Number of Connected Components in an Undirected Graph
490. The Maze (DFS with re-assign value to new variable recording start position in DFS recursion)
694. Number of Distinct Islands (DFS and choose base point and use set to check islands identical)
988. Smallest String Starting From Leaf (DFS should go from top-down only)
679. 24Game (ignore braces and implement back tracking by removing used elemnts)
688. Knight Probability in Chessboard (DFS memoization with 3-dimension array)
1079. Letter Tile Possibilities (DFS + backtracking + frequence table)
505. The Maze II (Dijkstra + PQ)
1190. Reverse Substrings Between Each Pair of Parentheses (DFS with two pointers both initilize as 0 and moving forward)
